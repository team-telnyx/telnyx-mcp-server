# Example Dockerfile if native App Service Python build is insufficient
FROM python:3.11-slim

WORKDIR /app

# Install uv (if strictly needed for runtime beyond Poetry's dependency management)
# RUN apt-get update && apt-get install -y curl && apt-get clean
# RUN curl -LsSf https://astral.sh/uv/install.sh | sh
# ENV PATH="/root/.cargo/bin:$PATH" # Adjust if uv path is different

# Copy project files
COPY pyproject.toml poetry.lock* ./

# Install dependencies using Poetry (standard way, uv can also be used if preferred)
RUN pip install poetry
RUN poetry config virtualenvs.create false && poetry install --no-dev --no-interaction --no-ansi

# Or using uv if you've installed it and prefer it for deployment installs:
# COPY requirements.txt . # Assuming you export a requirements.txt from poetry
# RUN uv pip install -r requirements.txt --system --no-cache

COPY . .

# App Service will set the PORT environment variable. FastAPI default is 8000.
ENV PORT=${PORT:-8000}
EXPOSE $PORT

# Startup command for the Telnyx MCP server
CMD ["python", "-m", "telnyx_mcp_server.server", "--host", "0.0.0.0", "--port", "$PORT"]