Okay, I'll tailor the instructions and explanations to be specific to deploying the `team-telnyx/telnyx-mcp-server` repository.

The core `azd` files (`azure.yaml`, `infra/main.bicep`, `azure-pipelines.yml`, `env.yaml`) provided previously are designed to work by being placed at the root of the `team-telnyx/telnyx-mcp-server` project. The assumption is that the `pyproject.toml` file and the `telnyx_mcp_server` Python package are located at this root, which is a standard layout for Python projects using Poetry.

Here are the repository-specific adjustments, primarily focusing on the documentation and setup instructions:

## Overview

This deployment provisions the **official Telnyx MCP Server (`team-telnyx/telnyx-mcp-server`)**, a Python-based CLI microservice, onto Azure App Service using the Azure Developer CLI (`azd`). Azure App Service (Linux) was chosen for its simplicity in hosting Python applications like this one (which uses FastAPI for its web components), native HTTPS for webhooks (eliminating `ngrok` in the cloud), and integration with Azure Key Vault for secure secret management.

The solution uses `azd` to orchestrate the provisioning of an App Service Plan, the App Service itself (configured for Python 3.11), Azure Key Vault for storing the `TELNYX_API_KEY`, and a Log Analytics workspace for monitoring. The Telnyx MCP server will run as a long-lived process within the App Service, serving API requests and webhooks. The deployment is designed to work from scratch using `azd up` directly within your clone of the `team-telnyx/telnyx-mcp-server` repository after adding these `azd` configuration files.

## Folder Layout

After cloning the `team-telnyx/telnyx-mcp-server` repository and adding the `azd` scaffolding files, your project structure would look like this:

```
telnyx-mcp-server/
├── .azure/                                # azd environment configurations (auto-generated by azd)
│   └── <your-azd-env-name>/
│       └── .env                           # azd generated .env file with outputs & secrets
├── .github/                               # Existing GitHub actions, issue templates etc. from telnyx-mcp-server
├── docs/                                  # Existing documentation from telnyx-mcp-server
├── examples/                              # Existing examples from telnyx-mcp-server
├── src/                                   # Existing source code for telnyx-mcp-server (if it uses a src layout)
│   └── telnyx_mcp_server/                 # Main package for the MCP server
├── tests/                                 # Existing tests from telnyx-mcp-server
├── infra/                                 # New: Azure resources definition for azd
│   └── main.bicep                         # New: Provisions App Service, KV, Log Analytics
├── .gitignore                             # Existing
├── azure-pipelines.yml                    # New: Azure DevOps CI/CD pipeline definition for azd
├── azure.yaml                             # New: azd project configuration
├── CHANGELOG.md                           # Existing
├── CONTRIBUTING.md                        # Existing
├── env.yaml                               # New: Sample for documenting required 'azd env set' values
├── LICENSE                                # Existing
├── poetry.lock                            # Existing
├── pyproject.toml                         # Existing: Python project definition (used by Poetry and azd/Oryx)
└── README.md                              # Existing (you'll add the snippet to this)
```
*(The key is that `azure.yaml`, `env.yaml`, `azure-pipelines.yml`, and the `infra/` directory are added to the root of your `team-telnyx/telnyx-mcp-server` clone.)*

## azure.yaml

This file defines the `azd` project. Since `pyproject.toml` (and thus the Python project root) is at the base of the `team-telnyx/telnyx-mcp-server` repository, `project: .` is correct.

```yaml name=azure.yaml
name: telnyx-mcp-azd # Name for your azd project
metadata:
  template: telnyx-mcp-server-azd-python@1.0.0 # Template identifier

services:
  app: # Logical name for the Telnyx MCP server application within azd
    project: . # Path to the application code (root of telnyx-mcp-server repo)
    language: python
    host: appservice
    module: app # Corresponds to the Bicep definitions, implies infra/main.bicep or infra/app.bicep
```

## env.yaml (sample)

This remains the same as previously provided, serving as documentation for environment variables. Users will need to set `TELNYX_API_KEY` specifically.

````yaml name=env.yaml
# Sample environment configuration for the Telnyx MCP Server azd deployment.
# These values should be set in your azd environment using:
# `azd env set <KEY> <VALUE>`
#
# For secrets, like TELNYX_API_KEY, it's recommended to use the --secret flag:
# `azd env set TELNYX_API_KEY <your-key> --secret`

# Azure specific (azd will prompt for these during `azd init` or `azd env new`)
# AZURE_LOCATION: "eastus"  # Example: Azure region for deployment.
# AZURE_SUBSCRIPTION_ID: "<your-subscription-id>" # Your Azure subscription ID.
# AZURE_ENV_NAME: "my-mcp-app-dev" # Your azd environment name.

# Application specific secrets
TELNYX_API_KEY: "<your-telnyx-api-key>" # REQUIRED_SECRET: Your Telnyx API Key. This will be stored securely in Azure Key Vault.

# Application specific configurations (these will be set as App Settings in App Service via Bicep)
# WEBHOOK_ENABLED: "true" # This is hardcoded to "true" in main.bicep as per requirements.
# PYTHON_VERSION: "3.11" # This is set in main.bicep.
# APP_SERVICE_SKU_NAME: "B1" # Basic tier for MVP, set in main.bicep.

# Note: TELNYX_MCP_SERVER_BASE_URL will be automatically derived from the App Service hostname
# and configured as an App Setting by the Bicep template.
````

## infra/main.bicep

The `main.bicep` file provided earlier is suitable. Its startup command:
`startupCommand: 'python -m telnyx_mcp_server.server --host 0.0.0.0 --port ${PORT:-8000}'`
is appropriate for the `team-telnyx/telnyx-mcp-server` project, as this is a standard way to run a Python module that's part of an installed package (Poetry will ensure `telnyx_mcp_server` is in the Python path within the App Service environment).

## Dockerfile (only if needed)

As previously discussed, a Dockerfile is likely **not** required for the `team-telnyx/telnyx-mcp-server` given its Python/Poetry-based nature and the capabilities of Azure App Service's Oryx build system. The native Python build should work.

## azure-pipelines.yml

The Azure DevOps pipeline definition provided earlier is also suitable. It correctly uses `azd` commands which will work from the root of the `team-telnyx/telnyx-mcp-server` repository once the `azd` files are added.

## README Snippet for Devs (Specific to `team-telnyx/telnyx-mcp-server`)

This snippet should be added to the existing `README.md` in the `team-telnyx/telnyx-mcp-server` repository.

````markdown name=README_SNIPPET_FOR_TELNYX_REPO.md
---

## Azure Deployment using Azure Developer CLI (`azd`)

This section describes how to deploy the Telnyx MCP Server to Azure App Service using the Azure Developer CLI (`azd`). The `azd` templates for this are included in this repository.

### Prerequisites

1.  [Azure Developer CLI (`azd`)](https://aka.ms/install-azd) installed.
2.  [Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli) installed and logged in (`az login`).
3.  [Python 3.10+](https://www.python.org/downloads/) (as per `telnyx-mcp-server` requirements).
4.  [Poetry](https://python-poetry.org/docs/#installation) (for local Python dependency management).
5.  A Telnyx API Key.
6.  You must be in the root directory of this `telnyx-mcp-server` repository clone.

### Setup and Deployment to Azure

1.  **Clone the repository (if you haven't already):**
    ```bash
    git clone https://github.com/team-telnyx/telnyx-mcp-server.git
    cd telnyx-mcp-server
    ```

2.  **Login to Azure via `azd`:**
    This command will open a browser window for you to authenticate.
    ```bash
    azd auth login
    ```

3.  **Initialize `azd` environment:**
    This command initializes the project for `azd`, creating a new environment (e.g., `my-mcp-dev`). It will prompt you for an environment name, Azure subscription, and Azure region.
    ```bash
    azd init
    ```
    *(If you already have an azd environment from a previous setup in this directory, you can use `azd env select <your-env-name>` or `azd env new <new-env-name>`)*

4.  **Set your Telnyx API Key:**
    This key is essential for the server to function. `azd` will store it securely and make it available to your Azure App Service via Azure Key Vault.
    ```bash
    azd env set TELNYX_API_KEY "YOUR_TELNYX_API_KEY_HERE" --secret
    ```
    You can also set your preferred Azure location if you didn't during `init`:
    ```bash
    # azd env set AZURE_LOCATION "eastus" # Example: set preferred Azure region
    ```

5.  **Provision infrastructure and deploy the application:**
    This single command will:
    *   Package the `telnyx-mcp-server` application.
    *   Provision all necessary Azure resources (App Service, Key Vault, Log Analytics) as defined in the `infra/` folder.
    *   Deploy the packaged application to the newly created App Service.
    *   Configure application settings, including the `TELNYX_API_KEY` from Key Vault.
    ```bash
    azd up
    ```
    This process can take several minutes, especially on the first run. `azd` will stream logs and show progress. Once complete, it will output the URL of your deployed application.

### Local Development (Using Poetry)

To run the Telnyx MCP server locally (as per the main project instructions):

1.  Ensure Poetry is installed and you are in the `telnyx-mcp-server` root directory.
2.  Install dependencies:
    ```bash
    poetry install
    ```
3.  Create a `.env` file in the project root with your `TELNYX_API_KEY` and other settings:
    ```env
    TELNYX_API_KEY="your_telnyx_api_key"
    WEBHOOK_ENABLED="true" # Or false
    TELNYX_MCP_SERVER_BASE_URL="http://localhost:8000" # For local testing
    # Add other env vars as needed by the server (see src/telnyx_mcp_server/config.py)
    ```
4.  Run the server using Poetry:
    ```bash
    poetry run python -m telnyx_mcp_server.server --port 8000
    ```

### Accessing Your Deployed Application

After `azd up` successfully completes, `azd` will print the endpoint URL for your App Service. You can use this URL to interact with your deployed Telnyx MCP Server.

Example (Health Check):
`curl https://<your-app-name>.azurewebsites.net/health`

### Updating the Deployment

If you make changes to the `telnyx-mcp-server` code or the `azd` configuration:
1. Commit your changes to git.
2. Run `azd deploy` to deploy code changes.
3. Run `azd provision` if you've changed infrastructure (Bicep files). Or simply run `azd up` again which handles both.

### Clean Up Azure Resources

To delete all Azure resources created by this `azd` template for a specific environment:
```bash
azd down
```
To also purge resources that support soft-delete (like Key Vault) immediately:
```bash
azd down --purge --force
```
*(Use `--purge` with caution as it permanently deletes resources.)*
````

## Post-Deploy Validation

This remains the same as previously described. The key is to use the endpoint URL provided by `azd up` after deployment.

1.  **Health Endpoint:**
    `curl YOUR_APP_SERVICE_ENDPOINT/health` (e.g., `https://app-telnyx-mcp-dev-xxxx.azurewebsites.net/health`)
    Expected: `{"status":"healthy"}`

2.  **API Docs (Swagger UI):**
    Open in browser: `YOUR_APP_SERVICE_ENDPOINT/docs`

## Constraints & Notes

These also remain largely the same. The crucial aspect is that the `azd` files are placed at the root of the `team-telnyx/telnyx-mcp-server` repository, and the `TELNYX_API_KEY` is correctly configured using `azd env set`.

By integrating these `azd` files directly into the `team-telnyx/telnyx-mcp-server` repository, anyone cloning the repo can easily deploy it to Azure using the standardized `azd` workflow.

---

Here's the comprehensive solution:

## Overview

This deployment provisions the Telnyx MCP Server, a Python-based CLI microservice, onto Azure App Service using the Azure Developer CLI (`azd`). Azure App Service (Linux) was chosen for its simplicity in hosting Python applications, native HTTPS for webhooks (eliminating the need for `ngrok` in the cloud), and integration with Azure Key Vault for secure secret management.

The solution uses `azd` to orchestrate the provisioning of an App Service Plan, the App Service itself (configured for Python 3.11), Azure Key Vault for storing the `TELNYX_API_KEY`, and a Log Analytics workspace for monitoring. The Telnyx MCP server, which uses FastAPI for its web components, will run as a long-lived process within the App Service, serving API requests and webhooks. The deployment is designed to work from scratch using `azd up`.

## Folder Layout

Here's the typical folder structure for this `azd` project. You would place these files at the root of your `telnyx-mcp-server` project, or a new repository containing these and the server code (e.g., in a `src` subdirectory if `azure.yaml` points to it).

```
.
├── .azure/                                # azd environment configurations (auto-generated)
│   └── <your-azd-env-name>/
│       └── .env                           # azd generated .env file with outputs & secrets
├── infra/
│   └── main.bicep                         # Azure resources definition (App Service, KV, etc.)
├── azure-pipelines.yml                    # Azure DevOps CI/CD pipeline definition
├── azure.yaml                             # azd project configuration
├── env.yaml                               # Sample for documenting required 'azd env set' values
├── pyproject.toml                         # Python project definition (from Telnyx MCP Server)
├── poetry.lock                            # Python lock file (from Telnyx MCP Server)
└── README.md                              # Your project's README (snippet will be added here)
```
*(Assuming `pyproject.toml` and the Python source code for `telnyx-mcp-server` are at the root alongside `azure.yaml`)*

## azure.yaml

This file defines the `azd` project, services, language, and hosting model.

```yaml name=azure.yaml
name: telnyx-mcp-azd
metadata:
  template: telnyx-mcp-azd-python@1.0.0 # Define your own template name/version

services:
  app: # This is the logical name of your service within azd
    project: . # Path to your application code, relative to azure.yaml (root in this case)
    language: python # Specifies the language of your application
    host: appservice # Specifies the Azure host (App Service)
    module: app # Bicep module name in the infra folder (e.g. infra/app.bicep or main.bicep if not modularized further)
```

## env.yaml (sample)

This file serves as documentation for environment variables that you need to configure using `azd env set`. `azd` itself doesn't directly consume this `env.yaml` but it's a good practice to list required configurations.

````yaml name=env.yaml
# Sample environment configuration for the Telnyx MCP Server azd deployment.
# These values should be set in your azd environment using:
# `azd env set <KEY> <VALUE>`
#
# For secrets, like TELNYX_API_KEY, it's recommended to use the --secret flag:
# `azd env set TELNYX_API_KEY <your-key> --secret`

# Azure specific (azd will prompt for these during `azd init` or `azd env new`)
# AZURE_LOCATION: "eastus"  # Example: Azure region for deployment.
# AZURE_SUBSCRIPTION_ID: "<your-subscription-id>" # Your Azure subscription ID.
# AZURE_ENV_NAME: "my-mcp-app-dev" # Your azd environment name.

# Application specific secrets
TELNYX_API_KEY: "<your-telnyx-api-key>" # REQUIRED_SECRET: Your Telnyx API Key. This will be stored securely in Azure Key Vault.

# Application specific configurations (these will be set as App Settings in App Service via Bicep)
# WEBHOOK_ENABLED: "true" # This is hardcoded to "true" in main.bicep as per requirements.
# PYTHON_VERSION: "3.11" # This is set in main.bicep.
# APP_SERVICE_SKU_NAME: "B1" # Basic tier for MVP, set in main.bicep.

# Note: TELNYX_MCP_SERVER_BASE_URL will be automatically derived from the App Service hostname
# and configured as an App Setting by the Bicep template.
````

## infra/main.bicep

This Bicep file provisions the necessary Azure infrastructure: App Service Plan, App Service for Python, Key Vault, and Log Analytics. It also configures the App Service to use the Key Vault for secrets.

````bicep name=infra/main.bicep
@description('The location to deploy the resources.')
param location string = resourceGroup().location

@description('The name of the environment (e.g., dev, test, prod). Used for resource naming.')
param environmentName string

@description('The principal ID of the user or service principal deploying the resources. Used to grant Key Vault access for deployment.')
param principalId string = '' // azd automatically populates this

@description('The Telnyx API Key. This will be stored as a secret in Key Vault.')
@secure()
param telnyxApiKey string

// Standard resource naming convention
var appServicePlanName = 'plan-${environmentName}-${uniqueString(resourceGroup().id)}'
var appServiceName = 'app-${environmentName}-${uniqueString(resourceGroup().id)}'
var keyVaultName = 'kv-${environmentName}-${uniqueString(resourceGroup().id)}'
var logAnalyticsWorkspaceName = 'log-${environmentName}-${uniqueString(resourceGroup().id)}'
var keyVaultTelnyxApiSecretName = 'TelnyxApiKey' // Standardized secret name in Key Vault

resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2022-10-01' = {
  name: logAnalyticsWorkspaceName
  location: location
  properties: {
    sku: {
      name: 'PerGB2018'
    }
    retentionInDays: 30
  }
}

resource appServicePlan 'Microsoft.Web/serverfarms@2022-09-01' = {
  name: appServicePlanName
  location: location
  kind: 'linux' // Linux App Service Plan
  sku: {
    name: 'B1' // Basic tier for MVP
    tier: 'Basic'
  }
  properties: {
    reserved: true // Required for Linux
  }
}

resource keyVault 'Microsoft.KeyVault/vaults@2023-07-01' = {
  name: keyVaultName
  location: location
  properties: {
    sku: {
      family: 'A'
      name: 'standard'
    }
    tenantId: subscription().tenantId
    enableRbacAuthorization: true // Recommended: Use RBAC for data plane access
    // accessPolicies: [] // Clear old access policies if any; RBAC is preferred
  }
}

// Grant the deploying principal (current user/SP) permissions to set secrets during provisioning
resource keyVaultDeploymentPrincipalAccess 'Microsoft.Authorization/roleAssignments@2022-04-01' = if (principalId != '') {
  name: guid(keyVault.id, principalId, 'KeyVaultSecretsOfficer')
  scope: keyVault
  properties: {
    principalId: principalId
    roleDefinitionId: resourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c1759a0') // Key Vault Secrets Officer
    principalType: 'User' // Or 'ServicePrincipal' if deploying via SP
  }
}


resource telnyxApiKeySecret 'Microsoft.KeyVault/vaults/secrets@2023-07-01' = {
  parent: keyVault
  name: keyVaultTelnyxApiSecretName
  properties: {
    value: telnyxApiKey // The API key passed as a parameter
  }
  dependsOn: [
    keyVaultDeploymentPrincipalAccess // Ensure permissions are set before trying to write secret
  ]
}

resource appService 'Microsoft.Web/sites@2022-09-01' = {
  name: appServiceName
  location: location
  kind: 'app,linux' // Web app on Linux
  identity: {
    type: 'SystemAssigned' // Enable System Assigned Managed Identity for Key Vault access
  }
  properties: {
    serverFarmId: appServicePlan.id
    httpsOnly: true // Enforce HTTPS
    siteConfig: {
      linuxFxVersion: 'PYTHON|3.11' // Specify Python 3.11
      pythonVersion: '3.11'
      alwaysOn: true // Keep the app alive for B1 SKU and above
      ftpsState: 'FtpsOnly'
      appSettings: [
        {
          name: 'TELNYX_API_KEY'
          value: '@Microsoft.KeyVault(SecretUri=${telnyxApiKeySecret.properties.secretUriWithVersion})'
        }
        {
          name: 'WEBHOOK_ENABLED'
          value: 'true'
        }
        {
          name: 'TELNYX_MCP_SERVER_BASE_URL'
          value: 'https://${appServiceName}.azurewebsites.net'
        }
        {
          name: 'SCM_DO_BUILD_DURING_DEPLOYMENT' // azd handles build, Oryx will run on App Service
          value: 'true' // Let Oryx build the application on deploy
        }
        {
          name: 'WEBSITES_PORT' // Port your application listens on
          value: '8000' // Default for many Python web frameworks; FastAPI uses this
        }
        {
          name: 'APPLICATIONINSIGHTS_CONNECTION_STRING' // For App Insights integration via Log Analytics
          value: reference(logAnalyticsWorkspace.id, '2022-10-01').instrumentationKey // This might need to be the full connection string
        }
        // Add other necessary environment variables here
      ]
      startupCommand: 'python -m telnyx_mcp_server.server --host 0.0.0.0 --port ${PORT:-8000}' // Startup command for Telnyx MCP Server
      // Assumes Telnyx MCP Server uses Poetry and pyproject.toml, which Oryx can build.
      // If `uv` is strictly needed for runtime and not just dev/build, a Dockerfile might be better.
    }
  }
}

// Grant App Service's Managed Identity access to Key Vault secrets
resource keyVaultAppServiceAccess 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(keyVault.id, appService.id, 'KeyVaultSecretsUser')
  scope: keyVault
  properties: {
    principalId: appService.identity.principalId
    roleDefinitionId: resourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6') // Key Vault Secrets User
    principalType: 'ServicePrincipal'
  }
}

// Outputs
output AZURE_LOCATION string = location
output AZURE_TENANT_ID string = subscription().tenantId
output AZURE_APP_SERVICE_ENDPOINT string = 'https://${appService.properties.defaultHostName}'
output AZURE_KEY_VAULT_NAME string = keyVault.name
output AZURE_KEY_VAULT_ENDPOINT string = keyVault.properties.vaultUri
output APPLICATIONINSIGHTS_CONNECTION_STRING string = appService.properties.siteConfig.appSettings[?name == 'APPLICATIONINSIGHTS_CONNECTION_STRING'].value
````

## Dockerfile (only if needed)

For this Python-based Telnyx MCP Server, which uses Poetry (as indicated by `pyproject.toml` in the actual repository), Azure App Service's native Python support (Oryx build system) is generally sufficient. Oryx can detect `pyproject.toml` and run `poetry install` to set up dependencies. The startup command in `main.bicep` then runs the application.

**A Dockerfile would be needed if:**
1.  The application has complex system-level dependencies not available in the standard App Service Python images.
2.  A very specific version or setup of `uv` (or other tools) is strictly required for the *runtime environment* itself, beyond what `poetry` provides for dependencies.
3.  You need more control over the build process than Oryx provides.

Given the assumptions ("Python runtime can launch MCP server as a long-lived process", "MCP startup should work with `python -m telnyx_mcp_server.server`"), a Dockerfile is likely **not** required for this MVP. The `azd` Python provider with App Service should handle it. If you encounter issues with the native build, then a Dockerfile would be the next step.

If a Dockerfile were needed, it would look something like this:
```Dockerfile name=Dockerfile.example
# Example Dockerfile if native App Service Python build is insufficient
FROM python:3.11-slim

WORKDIR /app

# Install uv (if strictly needed for runtime beyond Poetry's dependency management)
# RUN apt-get update && apt-get install -y curl && apt-get clean
# RUN curl -LsSf https://astral.sh/uv/install.sh | sh
# ENV PATH="/root/.cargo/bin:$PATH" # Adjust if uv path is different

# Copy project files
COPY pyproject.toml poetry.lock* ./

# Install dependencies using Poetry (standard way, uv can also be used if preferred)
RUN pip install poetry
RUN poetry config virtualenvs.create false && poetry install --no-dev --no-interaction --no-ansi

# Or using uv if you've installed it and prefer it for deployment installs:
# COPY requirements.txt . # Assuming you export a requirements.txt from poetry
# RUN uv pip install -r requirements.txt --system --no-cache

COPY . .

# App Service will set the PORT environment variable. FastAPI default is 8000.
ENV PORT=${PORT:-8000}
EXPOSE $PORT

# Startup command for the Telnyx MCP server
CMD ["python", "-m", "telnyx_mcp_server.server", "--host", "0.0.0.0", "--port", "$PORT"]
```
To use this Dockerfile with `azd`, you would change `language: python` to `language: docker` in `azure.yaml` and specify `docker.path: ./Dockerfile.example`.

## azure-pipelines.yml

This Azure DevOps pipeline automates the build and deployment using `azd`.

```yaml name=azure-pipelines.yml
trigger:
  branches:
    include:
    - main # Or your primary branch

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Define these variables in your Azure DevOps Library or Pipeline settings
  # AZURE_SERVICE_CONNECTION_NAME: 'YourAzureServiceConnectionName' # Name of your Azure Resource Manager service connection
  # TELNYX_API_KEY_PIPELINE_SECRET: $(YourTelnyxApiKeySecretInADO) # Name of the ADO secret variable for Telnyx API Key

  # azd environment settings
  AZURE_ENV_NAME: 'telnyx-mcp-pipeline' # Or derive from Build.SourceBranchName, etc.
  AZURE_LOCATION: 'eastus' # Or your preferred Azure region
  # AZURE_SUBSCRIPTION_ID: Set this in pipeline variables or it will be derived from the service connection

stages:
- stage: DeployInfrastructureAndApp
  displayName: 'Deploy Infrastructure and Application'
  jobs:
  - job: Deploy
    displayName: 'Initialize, Provision, and Deploy'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.11'
      displayName: 'Use Python 3.11'

    - script: |
        curl -fsSL https://aka.ms/install-azd.sh | bash
      displayName: 'Install Azure Developer CLI (azd)'
      # Ensure azd is on the PATH for subsequent steps. The script usually handles this.
      # For Microsoft-hosted agents, azd might already be available or easily installable.

    - script: |
        azd auth login --client-id $(servicePrincipalId) --client-secret $(servicePrincipalKey) --tenant-id $(tenantId)
      displayName: 'Login to Azure with Service Principal'
      # Ensure your Azure Service Connection has contributor rights on the subscription
      # and User Access Administrator to assign roles for Key Vault access.
      # $(servicePrincipalId), $(servicePrincipalKey), $(tenantId) are pre-defined ADO variables for the service connection.

    - script: |
        azd init -t telnyx-mcp-azd-python -e $(AZURE_ENV_NAME) --subscription $(AZURE_SUBSCRIPTION_ID) --location $(AZURE_LOCATION)
        # The -t template part is optional if code is already structured
        # Or, if code is already checked out:
        # azd env new $(AZURE_ENV_NAME) --subscription $(AZURE_SUBSCRIPTION_ID) --location $(AZURE_LOCATION)

        # Set the Telnyx API key for azd to use during provisioning (to store in Key Vault)
        # Ensure TELNYX_API_KEY_PIPELINE_SECRET is a secret variable in your ADO pipeline
        azd env set TELNYX_API_KEY $(TELNYX_API_KEY_PIPELINE_SECRET) --secret
      displayName: 'Initialize azd environment and set secrets'
      env:
        AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID) # Explicitly pass if needed
        # TELNYX_API_KEY_PIPELINE_SECRET is mapped from pipeline secret variables

    - script: |
        azd provision --no-prompt
      displayName: 'Provision Azure Resources (azd provision)'
      # This will use the TELNYX_API_KEY from `azd env` to populate the Key Vault secret via Bicep.

    - script: |
        azd deploy --no-prompt
      displayName: 'Deploy Application (azd deploy)'

    - script: |
        # Get the App Service endpoint from azd env get-values
        ENDPOINT=$(azd env get-values --output json | jq -r .AZURE_APP_SERVICE_ENDPOINT)
        echo "App Service Endpoint: $ENDPOINT"
        # Health check - Telnyx MCP server has a /health endpoint
        # Allow a few seconds for the app to start
        sleep 30
        curl -sSfL --retry 5 --retry-delay 10 "$ENDPOINT/health" || exit 1
      displayName: 'Health Check Smoke Test'
```

## README Snippet for Devs

````markdown name=README_SNIPPET.md
## Telnyx MCP Server Azure Deployment (`azd`)

This project includes an Azure Developer CLI (`azd`) template to deploy the Telnyx MCP Server to Azure App Service.

### Prerequisites

1.  [Azure Developer CLI (`azd`)](https://aka.ms/install-azd)
2.  [Azure CLI](https://docs.microsoft.com/cli/azure/install-azure-cli) (logged in: `az login`)
3.  [Python 3.10+](https://www.python.org/downloads/)
4.  [Poetry](https://python-poetry.org/docs/#installation) (for local Python dependency management, if you modify the code)
5.  A Telnyx API Key.

### Local Development & Setup (One-time)

1.  **Clone the repository (if you haven't already):**
    ```bash
    git clone https://github.com/team-telnyx/telnyx-mcp-server.git
    cd telnyx-mcp-server
    # (Or your fork/project location where these azd files are)
    ```

2.  **Login to Azure via `azd`:**
    ```bash
    azd auth login
    ```

3.  **Initialize `azd` environment (creates `.azure` folder):**
    This step will prompt you for an environment name, subscription, and location.
    ```bash
    azd init
    # Or if you already have the files and want to create a new environment:
    # azd env new my-mcp-app-dev  # (replace with your desired environment name)
    ```

4.  **Set your Telnyx API Key:**
    This key will be stored securely by `azd` and provisioned into Azure Key Vault.
    ```bash
    azd env set TELNYX_API_KEY "YOUR_TELNYX_API_KEY_HERE" --secret
    ```
    You can also set your preferred Azure location if not done during `init`:
    ```bash
    # azd env set AZURE_LOCATION "eastus" # Or your preferred region
    ```

### Deploy to Azure

1.  **Provision infrastructure and deploy the application:**
    This command will package the application, create all necessary Azure resources (App Service, Key Vault, etc.), and deploy the code.
    ```bash
    azd up
    ```
    This process might take several minutes. `azd` will stream logs and show progress.

### Run Locally (Optional, for testing server logic)

To run the Telnyx MCP server locally (independent of `azd` deployment):
1.  Ensure Poetry is installed.
2.  Install dependencies: `poetry install`
3.  Create a `.env` file in the project root with your `TELNYX_API_KEY` and other settings:
    ```env
    TELNYX_API_KEY="your_telnyx_api_key"
    WEBHOOK_ENABLED="true" # Or false
    TELNYX_MCP_SERVER_BASE_URL="http://localhost:8000"
    # Add other env vars as needed by the server
    ```
4.  Run the server using Poetry:
    ```bash
    poetry run python -m telnyx_mcp_server.server --port 8000
    ```

### Clean Up Resources

To delete all Azure resources created by this deployment for a specific environment:
```bash
azd down --purge --force
```
(Be cautious with `--purge` as it permanently deletes Key Vaults without soft-delete)
````

## Post-Deploy Validation

Once `azd up` completes, it will output the endpoint for your App Service. The Telnyx MCP Server (being FastAPI-based) exposes a health check endpoint and API documentation.

1.  **Check the Health Endpoint:**
    Replace `YOUR_APP_SERVICE_ENDPOINT` with the actual URL from `azd up` output (e.g., `https://app-your-env-name-uniqueid.azurewebsites.net`).
    ```bash
    curl YOUR_APP_SERVICE_ENDPOINT/health
    ```
    You should receive a response like: `{"status":"healthy"}`

2.  **Check API Docs (FastAPI Swagger UI):**
    Open your browser and navigate to:
    `YOUR_APP_SERVICE_ENDPOINT/docs`

3.  **Example: List SMS Conversations (conceptual, actual endpoint might vary):**
    The prompt mentioned `/resource://sms/conversations`. This looks like an internal identifier. For actual API interaction, you'd use the HTTP endpoints defined by the server, which can be found in the `/docs`. For example, if there's a `/sms/conversations` endpoint:
    ```bash
    curl -X GET \
      -H "Authorization: Bearer YOUR_TELNYX_API_KEY_OR_OTHER_AUTH_MECHANISM" \
      YOUR_APP_SERVICE_ENDPOINT/api/v1/sms/conversations # Adjust path as per actual API
    ```
    *Note: The Telnyx MCP server might use the `TELNYX_API_KEY` internally and not require it as a Bearer token for its own exposed API endpoints if it's acting as a proxy/protocol converter. Check its API documentation for specific authentication requirements for its endpoints.*

## Constraints & Notes

*   **Telnyx API Key:** The `TELNYX_API_KEY` is critical. Ensure it's correctly set in `azd env set TELNYX_API_KEY <value> --secret` for `azd up` to provision it into Key Vault. For CI/CD, this key must be securely provided to the pipeline (e.g., as a secret variable in Azure DevOps).
*   **Python Dependencies:** This solution assumes the `telnyx-mcp-server` uses Poetry and its `pyproject.toml` is at the root where `azd` is run. The App Service Oryx build will use Poetry to install dependencies.
*   **Startup Command:** The Bicep template uses `python -m telnyx_mcp_server.server --host 0.0.0.0 --port ${PORT:-8000}`. Ensure this command is correct for starting the server in a production-like mode listening on the port provided by App Service.
*   **Resource Naming:** Resource names include `uniqueString(resourceGroup().id)` to ensure global uniqueness.
*   **SKU Sizes:** The App Service Plan uses `B1` (Basic) for MVP. For production, you might need a higher SKU (e.g., Standard tier for more features like deployment slots, custom domains with SNI SSL, etc.).
*   **Key Vault RBAC:** The Bicep template enables RBAC on Key Vault and grants the deploying principal (user/SP) "Key Vault Secrets Officer" role to write the initial secret, and the App Service's Managed Identity "Key Vault Secrets User" role to read secrets. This is more secure than access policies.
*   **No `ngrok`:** Webhooks are served directly via the App Service's public HTTPS endpoint. The `TELNYX_MCP_SERVER_BASE_URL` environment variable is set to this public endpoint.
*   **Minimal Infra:** The deployment is kept minimal (App Service, Plan, KV, Log Analytics). No databases or queues are provisioned.
*   **`azd` Version:** Ensure you are using a recent version of `azd`.
*   **First Deployment:** The first `azd provision` or `azd up` might take longer as it creates all resources. Subsequent deployments are faster.
*   **Log Analytics Integration:** Basic Log Analytics integration is set up. You might want to configure `APPLICATIONINSIGHTS_CONNECTION_STRING` more robustly or use the Application Insights resource directly for richer monitoring. The current Bicep uses the LA workspace instrumentation key, which provides some level of integration.

This scaffold should provide a solid starting point for deploying the Telnyx MCP Server to Azure with `azd`. Remember to replace placeholder values and adapt configurations to your specific needs.

